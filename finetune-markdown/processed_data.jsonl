{"text": "# What's new in C# 13\n\n**In this article**\n1. [New escape sequence](https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-13#new-escape-sequence)\n2. [Method group natural type](https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-13#method-group-natural-type)\n3. [Implicit index access](https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-13#implicit-index-access)\n4. [See also](https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-13#see-also)\n\nC# 13 includes the following new features. You can try these features using the latest [Visual Studio 2022](https://visualstudio.microsoft.com/vs/preview/) version or the [.NET 9 Preview SDK](https://dotnet.microsoft.com/download/dotnet).\n\n- [New escape sequence - `\\e`](https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-13#new-escape-sequence).\n- [Method group natural type improvements](https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-13#method-group-natural-type)\n- [Implicit indexer access in object initializers](https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-13#implicit-index-access)\n\nC# 13 is supported on **.NET 9**. For more information, see [C# language versioning](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/configure-language-version).\n\nYou can download the latest .NET 9 preview SDK from the [.NET downloads page](https://dotnet.microsoft.com/download). You can also download [Visual Studio 2022 - preview](https://visualstudio.microsoft.com/vs/), which includes the .NET 9 Preview SDK.\n\nNew features are added to the \"What's new in C#\" page when they are available in public preview releases. The [working set](https://github.com/dotnet/roslyn/blob/main/docs/Language%20Feature%20Status.md#working-set) section of the [roslyn feature status page](https://github.com/dotnet/roslyn/blob/main/docs/Language%20Feature%20Status.md) tracks when upcoming features are merged into the main branch.\n\nNote\n\nWe're interested in your feedback on these features. If you find issues with any of these new features, create a [new issue](https://github.com/dotnet/roslyn/issues/new/choose) in the [dotnet/roslyn](https://github.com/dotnet/roslyn) repository.\n\n**New escape sequence**\n\nYou can use `\\e` as a [character literal](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#6455-character-literals) escape sequence for the `ESCAPE` character, Unicode `U+001B`. Previously, you used `\\u001b` or `\\x1b`. Using `\\x1b` wasn't recommended because if the next characters following `1b` were valid hexadecimal digits, those characters became part of the escape sequence.\n\n**Method group natural type**\n\nThis feature makes small optimizations to overload resolution \ninvolving method groups. The previous behavior was for the compiler to \nconstruct the full set of candidate methods for a method group. If a \nnatural type was needed, the natural type was determined from the full \nset of candidate methods.\n\nThe new behavior is to prune the set of candidate methods at each \nscope, removing those candidate methods that aren't applicable. \nTypically, these are generic methods with the wrong arity, or \nconstraints that aren't satisfied. The process continues to the next \nouter scope only if no candidate methods have been found. This process \nmore closely follows the general algorithm for overload resolution. If \nall candidate methods found at a given scope don't match, the method \ngroup doesn't have a natural type.\n\nYou can read the details of the changes in the [proposal specification](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/method-group-natural-type-improvements).\n\n**Implicit index access**\n\nThe implicit \"from the end\" index operator, `^`, is now \nallowed in an object initializer expression. For example, you can now \ninitialize an array in an object initializer as shown in the following \ncode:\n\nC#\n\n```\nvar v = new S()\n{\n    buffer =\n    {\n        [^1] = 0,\n        [^2] = 1,\n        [^3] = 2,\n        [^4] = 3,\n        [^5] = 4,\n        [^6] = 5,\n        [^7] = 6,\n        [^8] = 7,\n        [^9] = 8,\n        [^10] = 9\n    }\n};\n\n```\n\nIn versions prior to C# 13, the `^` operator can't be used in an object initializer. You need to index the elements from the front."}
